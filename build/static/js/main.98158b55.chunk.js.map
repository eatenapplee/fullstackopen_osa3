{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/people.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","onChange","PersonForm","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","Persons","filtered","persons","filter","person","name","toLowerCase","includes","map","key","number","onClick","handleDelete","nonFiltered","id","baseUrl","newObject","axios","post","then","response","data","get","delete","put","Notification","message","className","problem","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","errorMessage","setErrorMessage","count","setCount","useEffect","peopleService","initialPeople","event","target","preventDefault","nameObject","newPersons","personExists","some","p","findPerson","find","window","confirm","returnedPeople","console","log","setTimeout","catch","error","returnedPerson","concat","JSON","stringify","filteredPeople","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98158b55.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = (props) => {\n    \n    return (\n        <div>\n            filter shown with <input value={props.value} onChange={props.onChange} />\n        </div>\n    );\n}\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n    return (\n        <div>\n        <form onSubmit={props.onSubmit}>  \n            <div>\n                name: <input value={props.nameValue} onChange={props.nameOnChange} />\n            </div>\n            <div>\n                number: <input value={props.numberValue}Â onChange={props.numberOnChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n        </div>\n    );\n}\n\nexport default PersonForm;\n","import React from 'react';\n\n\nconst Persons = (props) => {\n\n    //console.log(props.persons.filter(person => person.name.toLowerCase()));\n    \n    const filtering = props.persons.filter(person => person.name.toLowerCase().includes(props.filter.toLowerCase()))\n    const filtered = filtering.map(person => <div key={person.name}>{person.name} &nbsp; {person.number} &nbsp; <button onClick={props.handleDelete}>delete</button></div>)\n    const nonFiltered = props.persons.map(person => <div key={person.name}>{person.name} &nbsp; {person.number} &nbsp; <button onClick={() => props.handleDelete(person.id)}>delete</button></div>)\n    return (\n        \n        <div>\n            {props.filter === '' ? nonFiltered : filtered}\n        </div>\n    );\n}\n\nexport default Persons;\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {create, getAll, remove, update}","import React from 'react';\nimport './Notification.css'\n\nconst Notification = (props) => {\n    if (props.message === null) {\n        return null\n    }\n\n    return (\n        <div className={props.problem ? 'error' : 'notification'}>\n            {props.message}\n        </div>\n    );\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport peopleService from './services/people'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [count, setCount] = useState(0)\n\n\n  useEffect(() => {\n    peopleService.getAll()\n    .then(initialPeople => {\n      setPersons(initialPeople)\n      \n    })\n    \n  }, [count])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    var newPersons = persons\n    const personExists = persons.some(p => p.name === newName)\n    const findPerson = persons.find(p => p.name === newName)\n    if (personExists) {\n      const result = window.confirm(`${newName} is already added to phonebook, replace the old number with the new one ?`)\n      if (result === true) {\n        peopleService.update(findPerson.id, nameObject)\n          .then(returnedPeople => {\n            setMessage('Info updated successfully')\n            console.log(findPerson)\n            setPersons(persons.map(p => p.id === findPerson.id ? returnedPeople : p))\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${findPerson.name} has already been removed from server`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n      } else {\n        return null\n      }\n    } else {\n      peopleService.create(nameObject)\n        .then(returnedPerson => {\n          newPersons.concat(returnedPerson)\n          setCount(count+1)\n          setPersons(newPersons)\n          setNewName('')\n          setNewNumber('')\n          setMessage('Added successfully')\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          \n          \n        }).catch(error => {\n          console.log(error.response.data);\n          \n          setErrorMessage(JSON.stringify(error.response.data))\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n\n    }\n    \n\n  }\n\n  const handleDelete = (id) => {\n    console.log(id);\n    const findPerson = persons.find(person => person.id === id)\n    const result = window.confirm(`Delete ${findPerson.name} ?`)\n    if (result === true) {\n      peopleService.remove(id)\n      .then(filteredPeople => {\n        setMessage('Deleted successfully')\n        console.log('removed')\n        setPersons(persons.filter(p => p.id !== id))\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n    } else {\n      return null\n    }\n\n\n  }\n  \n  \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Notification message={errorMessage} problem={true} />\n      <Filter value={filter} onChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm onSubmit={handleSubmit} nameValue={newName} nameOnChange={handleNameChange} numberValue={newNumber} numberOnChange={handleNumberChange}/>\n      <h2>Numbers</h2>\n      <Persons filter={filter} persons={persons} handleDelete={handleDelete} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}